package com.patterns.cacheproxy;

import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

public class ItemCache {
	private final int Max_cache_size;
	private Vector<Item> cache;
	private Map<Item, Integer> counter;
	
	public ItemCache(int maxSize) {
		Max_cache_size = maxSize;
		cache = new Vector<>(Max_cache_size);
		counter = new HashMap<>();
	}
	
	public Item getItem(String code){
		Item item = null;
		int pos = -1;
		for (int i = 0; i < cache.size(); i++) {
			if(cache.get(i).getBarCode() == code){
				pos = i;
			}
		}
		if(pos != -1){
			item = cache.get(pos);
		}
		return item;
	}
	
	public void addItem(Item item){
		if(cache.size() == Max_cache_size || cache.size() >= Max_cache_size){
			cache.remove((Item) getIndexOfItemWithLessFrequency());
			System.out.println(cache.size());
		}
		cache.add(item);
	}
	
	public void countFrequency(Item item){
		if(counter.containsKey(item)){
			counter.put(item, counter.get(item) + 1);
		} else {
			counter.put(item, 1);
		}
	}
	
	public Item getIndexOfItemWithLessFrequency(){
		Item item = counter.entrySet().iterator().next().getKey();
		for (Item i : counter.keySet()) {
			if(counter.get(i) < counter.get(item) && cache.contains(counter.get(i))){
				item = i;
			}
		}
		return item;
	}
	
	public void printFrequency(){
		for (Item item : counter.keySet()) {
			System.out.print(item.getBarCode() + " " + counter.get(item) + " ");
		}
	}
	
	public Vector<Item> getCache() {
		return cache;
	}

	public void setCache(Vector<Item> cache) {
		this.cache = cache;
	}
	
	
}
